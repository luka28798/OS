/**
 * Memory operations library.
 */ 
class Memory
{
    static Array ram;
    static Array freeList;
    
    /** Initializes memory parameters. */
    function void init()
    {
        let ram = 0;
        
        // set heap and free list to 2048 (heap top)
        let freeList = 2048;
        
        // initial values
        let freeList[0] = 0;     // no next block at start
        let freeList[1] = 14334; // initial block length, 16384 - 2048 - 1
        
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address)
    {
        return ram[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value)
    {
        let ram[address] = value;
        return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size)
    {
        var int curr, next, len, new;
        let curr = freeList;
        
        // iterate through all blocks
        while (~(curr = 0))
        {
            let next = ram[curr];
            let len = ram[curr + 1];
            
            // check if current block is large enough
            if (~(len < size + 2)) // len >= size + 2
            {
                // the block is large enough, use it (first fit) 
                
                let ram[curr + 1] = len - size - 2;
                
                let new = curr + len - size;
                let ram[new] = 0; //nullptr
                let ram[new + 1] = size;
                
                // return first element
                return new + 2;
            }            
            
            let curr = next;
        }
        do Memory.defrag();
        return Memory.alloc(size);
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object)
    {
        let ram[object - 2] = freeList;
        let freeList = object - 2;
        return;
    }   

    function void memcpy(int source, int destination, int num) 
    {
        var int i;
        let i = 0;
        while (i < num) 
        {
            let ram[destination + i] = ram[source + i]; 
            let i = i + 1;
        }

        return;
    }

    function void defrag()
    {
        var int curr, next;
        let curr = freeList;
        let next = ram[curr];
        while (~(next = 0))
        {
            if (next = (curr + ram[curr + 1] + 2))
            {
                let ram[curr + 1] = ram[next + 1] + ram[curr + 1] + 2;
                let ram[curr] = ram[next];
            }
            let curr = next;
            let next = ram[curr];
        }
        return;
    }
}